#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <windows.h>

#define SCREEN_WIDTH 50
#define SCREEN_HEIGHT 20
#define OBSTACLE_GAP 6
#define INITIAL_SPEED 100 // 初始遊戲速度 (以毫秒計)

int birdY, score, obstacleX, obstacleGapY, obstacleWidth, gameOver, gameSpeed;

// 節點結構
struct Node {
    int score;
    struct Node* left;
    struct Node* right;
};

// 建立新節點
struct Node* create_node(int score) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->score = score;
    newNode->left = newNode->right = NULL;
    return newNode;
}

// 插入分數到 BST
struct Node* insert(struct Node* root, int score) {
    if (root == NULL) {
        return create_node(score);
    }
    if (score < root->score) {
        root->left = insert(root->left, score);
    } else {
        root->right = insert(root->right, score);
    }
    return root;
}

// 中序遍歷輸出所有分數
void inorder(struct Node* root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->score);
        inorder(root->right);
    }
}

// 隱藏滑鼠指標
void hide_cursor() {
    CONSOLE_CURSOR_INFO cursorInfo;
    cursorInfo.bVisible = FALSE;
    cursorInfo.dwSize = 1;
    SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &cursorInfo);
}

// 清除畫面
void clear_screen() {
    COORD coord = {0, 0};
    SetConsoleCursorPosition(GetStdHandle(STD_OUTPUT_HANDLE), coord);
}

void initialize_game() {
    birdY = SCREEN_HEIGHT / 2;
    score = 0;
    obstacleX = SCREEN_WIDTH - 1;
    obstacleGapY = rand() % (SCREEN_HEIGHT - OBSTACLE_GAP);
    obstacleWidth = 2 + rand() % 4; // 隨機障礙物寬度（2 到 5 列）
    gameSpeed = INITIAL_SPEED; // 初始化遊戲速度
    gameOver = 0;
}

void draw_screen() {
    clear_screen();
    for (int y = 0; y < SCREEN_HEIGHT; y++) {
        for (int x = 0; x < SCREEN_WIDTH; x++) {
            if (x == 5 && y == birdY) {
                printf("-'o'-"); // 使用 "-'o'-" 作為小鳥
                x += 4;         // 小鳥佔用 5 個字符，跳過多餘列
            }
            // 障礙物區域繪製
            else if (x >= obstacleX && x < obstacleX + obstacleWidth &&
                     (y < obstacleGapY || y > obstacleGapY + OBSTACLE_GAP)) {
                printf("|");
            }
            else {
                printf(" "); // 空白
            }
        }
        printf("\n"); // 換行
    }
    printf("Score: %d\n", score); // 顯示分數
}

void update_bird_position(int keyPressed) {
    if (keyPressed) birdY--;
    else birdY++;
}

void update_obstacle() {
    obstacleX--; // 障礙物向左移動
    if (obstacleX < 0) {
        obstacleX = SCREEN_WIDTH - 1;
        obstacleGapY = rand() % (SCREEN_HEIGHT - OBSTACLE_GAP);
        obstacleWidth = 2 + rand() % 4; // 每次生成新障礙物時隨機寬度
        score++;

        // 每通過一個障礙物，增加遊戲速度
        if (gameSpeed > 30) { // 遊戲速度下限為 30 毫秒，避免過快
            gameSpeed -= 5; // 減少延遲時間
        }
    }
    if (obstacleX <= 5 && obstacleX + obstacleWidth > 5 &&
        (birdY < obstacleGapY || birdY > obstacleGapY + OBSTACLE_GAP)) {
        gameOver = 1; // 檢測碰撞
    }
}

void check_collision() {
    if (birdY < 0 || birdY >= SCREEN_HEIGHT) {
        gameOver = 1; // 檢測邊界
    }
}

void game_loop() {
    int keyPressed = 0;
    while (!gameOver) {
        if (_kbhit()) {
            char key = _getch();
            if (key == ' ') keyPressed = 1;
        } else {
            keyPressed = 0;
        }
        update_bird_position(keyPressed);
        update_obstacle();
        check_collision();
        draw_screen();
        Sleep(gameSpeed); // 使用動態的延遲時間
    }
    printf("Game Over! Final Score: %d\n", score);
}

int main() {
    struct Node* root = NULL; // 初始化 BST
    char choice;

    hide_cursor();

    do {
        // 初始化並開始遊戲
        initialize_game();
        draw_screen();
        game_loop();

        // 遊戲結束，將分數插入 BST
        root = insert(root, score);

        // 顯示當前所有分數
        printf("\nAll Scores (Sorted): ");
        inorder(root);
        printf("\n");

        // 詢問玩家是否重新開始
        printf("Do you want to play again? (y/n): ");
        choice = _getch();
        printf("\n");
    } while (choice == 'y' || choice == 'Y');

    // 遊戲結束後的總分數排序結果
    printf("\nFinal Scores (Sorted): ");
    inorder(root);
    printf("\nThank you for playing!");
    printf("\n");

    return 0;
}
