; MASM 組合語言範例，用於模擬簡化版的小鳥遊戲

.386
.model flat, stdcall
.stack 4096

ExitProcess PROTO, dwExitCode:DWORD
GetStdHandle PROTO STDCALL, nStdHandle:DWORD
SetConsoleCursorPosition PROTO STDCALL, hConsoleOutput:DWORD, lpCursorPosition:DWORD

.data
SCREEN_WIDTH DWORD 50
SCREEN_HEIGHT DWORD 20
OBSTACLE_GAP DWORD 6
INITIAL_SPEED DWORD 100
birdY DWORD ?
score DWORD 0
gameSpeed DWORD ?
gameOver DWORD 0

obstacleX DWORD 50, 60, 70 ; 障礙物 X 座標
obstacleGapY DWORD 8, 10, 12 ; 障礙物縫隙 Y 座標
obstacleWidth DWORD 3, 4, 5 ; 障礙物寬度

prompt db "Game Over! Final Score: ", 0
scoreMessage db "Score: ", 0
highScoreMessage db "High Score: ", 0

.code
main PROC
    ; 初始化遊戲變數
    mov birdY, 10
    mov eax, INITIAL_SPEED
mov gameSpeed, eax
    mov gameOver, 0

start_game:
    ; 主遊戲迴圈
    mov eax, gameOver
    cmp eax, 1
    je end_game

    ; 更新鳥的位置
    call update_bird_position

    ; 更新障礙物
    call update_obstacles

    ; 檢查碰撞
    call check_collision

    ; 繪製畫面
    call draw_screen

    ; 延遲遊戲速度
    push gameSpeed
    mov eax, gameSpeed
push eax


    jmp start_game

end_game:
    ; 遊戲結束處理
    lea edx, prompt
    push edx

add esp, 4
    add esp, 4

    ; 顯示最終分數
    mov eax, score
    push eax
    lea edx, scoreMessage
    push edx
  
    add esp, 8

    ; 結束程式
    INVOKE ExitProcess, 0
main ENDP

; 函式：更新鳥的位置
update_bird_position PROC
    ; 簡單邏輯：小鳥自動下墜
    mov eax, birdY
    inc eax
    mov birdY, eax
    ret
update_bird_position ENDP

; 函式：更新障礙物
update_obstacles PROC
    ; 循環更新每個障礙物
    mov ecx, 3 ; 障礙物數量
    lea esi, obstacleX
    .repeat
        mov eax, [esi]
        dec eax
        mov [esi], eax

        ; 如果障礙物移出畫面，重置位置
        cmp eax, 0
        jge next_obstacle
        mov eax, SCREEN_WIDTH
        mov [esi], eax
next_obstacle:
        add esi, 4
    .untilcxz
    ret
update_obstacles ENDP

; 函式：檢查碰撞
check_collision PROC
    mov eax, birdY
    cmp eax, SCREEN_HEIGHT
    jge collision_detected
    cmp eax, 0
    jl collision_detected
    ret

collision_detected:
    mov gameOver, 1
    ret
check_collision ENDP

; 函式：繪製畫面
draw_screen PROC
    ; 簡化：僅顯示遊戲狀態
    ; 真正的繪製需要處理更多細節
    ret
draw_screen ENDP

END main
;可以執行
